/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto2;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;

/**
 *
 * @author Ada Arellano y Adolfo Barberi
 */
public class Interfaz2 extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz2
     */
    public resumen resumenObj;
    resumen ListaResumenes[] = new resumen[50];
    static String[] hTitulos = new String[50];
    static NodoDoble[] hPClaves = new NodoDoble[50];
    int intHashCal;
    DefaultListModel<String> modelo = new DefaultListModel<>();
    DefaultListModel<String> modelo2 = new DefaultListModel<>();
    private String[] rutasArchivos = new String[50]; 
    private int contadorArchivos = 0;
    public Interfaz2() {
        for (int i=0; i<50; i++)
            hTitulos[i] = "";


        for (int i=0; i<50; i++)
        {
            NodoDoble Nodo = new NodoDoble("");
            Nodo.setListaAdy("");
            hPClaves[i] = Nodo;
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        analizar_resumen = new javax.swing.JToggleButton();
        cargar_resumen = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        input_buscar = new javax.swing.JTextField();
        search_pclave = new javax.swing.JToggleButton();
        search_autor = new javax.swing.JToggleButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        info_resumen = new javax.swing.JTextArea();
        salir = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        info_estadisticas = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        titulo_cargado = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        resuemen_cargado = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        agregar_lista = new javax.swing.JButton();
        mostrar_inforesumen = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Lista_para_buscar = new javax.swing.JList<>();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        jPanel1.add(jInternalFrame1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 290, 100));

        jInternalFrame2.setVisible(true);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        analizar_resumen.setText("Analizar resumen");
        analizar_resumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizar_resumenActionPerformed(evt);
            }
        });

        cargar_resumen.setText("Cargar Archivo");
        cargar_resumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargar_resumenActionPerformed(evt);
            }
        });

        jLabel1.setText("Titulos");

        jLabel2.setText("Articulos Científicos");

        jLabel3.setText("Buscar");

        input_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_buscarActionPerformed(evt);
            }
        });

        search_pclave.setText("Buscar por palabra clave");
        search_pclave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_pclaveActionPerformed(evt);
            }
        });

        search_autor.setText("Buscar por autor");
        search_autor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_autorActionPerformed(evt);
            }
        });

        info_resumen.setColumns(20);
        info_resumen.setRows(5);
        jScrollPane5.setViewportView(info_resumen);

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        info_estadisticas.setColumns(20);
        info_estadisticas.setRows(5);
        jScrollPane3.setViewportView(info_estadisticas);

        titulo_cargado.setColumns(20);
        titulo_cargado.setRows(5);
        jScrollPane7.setViewportView(titulo_cargado);

        jScrollPane8.setViewportView(resuemen_cargado);

        jLabel4.setText("Lista");

        jLabel5.setText("Lista de resumenes");

        agregar_lista.setText("Agregar a la lista de resumenes");
        agregar_lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_listaActionPerformed(evt);
            }
        });

        mostrar_inforesumen.setText("Mostrar Información del resumen");
        mostrar_inforesumen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrar_inforesumenActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(Lista_para_buscar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cargar_resumen)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(jScrollPane3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(agregar_lista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(analizar_resumen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(105, 105, 105))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salir)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(search_pclave)
                        .addGap(18, 18, 18)
                        .addComponent(search_autor))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel4))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mostrar_inforesumen)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cargar_resumen)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(agregar_lista)
                        .addGap(18, 18, 18)
                        .addComponent(analizar_resumen)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(search_pclave)
                    .addComponent(search_autor))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mostrar_inforesumen)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(salir)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void input_buscarActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    public static boolean ExisteTitulo(String[] hTitulos,String sTitulo){
        return tablaHash.search(hTitulos, sTitulo);
        
    }
    
    
    private void cargar_resumenActionPerformed(java.awt.event.ActionEvent evt) {                                               
    String ruta = System.getProperty("user.dir");
    JFileChooser fc;
    fc = new JFileChooser(ruta);
    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivo","txt");
    fc.setFileFilter(filtro);
    
    int res = fc.showOpenDialog(this);
    if(res == JFileChooser.APPROVE_OPTION){
        ruta = fc.getSelectedFile().getPath();
         
        String contenido = obtenerContenidoArchivo(ruta);  // Obtener el contenido del archivo
        String titulo = ObtenerTitulo(contenido);  // Obtener el título
        String autores = ObtenerAutores(contenido);  // Obtener los autores
        String resumen = ObtenerResumen(contenido);  // Obtener el resumen
        String palabrasClave = ObtenerPalabrasClaves(contenido);  // Obtener las palabras clave
        
        resumenObj = new resumen(titulo, autores, resumen, palabrasClave);
      
        if (!ExisteTitulo(hTitulos, resumenObj.getTitulo()))
        {
            intHashCal = tablaHash.calcularHash(resumenObj.getTitulo());
            tablaHash.insertData(hTitulos, resumenObj.getTitulo());
            ListaResumenes[intHashCal] = resumenObj;
            IncluirPalabrasClaves(hPClaves, resumenObj.getP_clave(), intHashCal);


            String cadena_inthashcal = String.valueOf(intHashCal);
            String titulo_guardado = resumenObj.getTitulo();
            titulo_cargado.setText(cadena_inthashcal+" - "+titulo_guardado);
           
        }else{
            JOptionPane.showMessageDialog(null, "El resumen ya fue agregado.");
        }
        
    /*    
        boolean tituloRepetido = false;
        for (resumen resumenRegistrado : ListaResumenes) {
           
            if (resumenRegistrado != null && resumenRegistrado.getTitulo().equals(titulo)) {
                
                tituloRepetido = true;
                //System.out.println("Este resumen ya esta cargado, ingrese otro"); //aun no funciona
                
                break;
            }
        

            if (!tituloRepetido) {
            
                    if (resumenRegistrado == null) {
                        resumenRegistrado = resumenObj;
                    }
              
        

            
        
            primera_palabra(resumenObj);
            intHashCal = tablaHash.calcularHash(primera_palabra(resumenObj));
            
            
            for (int i=0; i<50; i++)
                hTitulos[i] = "";
            
            
            for (int i=0; i<50; i++)
            {
                NodoDoble Nodo = new NodoDoble("");
                Nodo.setListaAdy("");
                hPClaves[i] = Nodo;
            }
            
            
               tablaHash.insertData(hTitulos, resumenObj.getTitulo());
                ListaResumenes[intHashCal] = resumenObj;
                IncluirPalabrasClaves(hPClaves, resumenObj.getP_clave(), intHashCal);
                
                
                String cadena_inthashcal = String.valueOf(intHashCal);
                String titulo_guardado = resumenObj.getTitulo();
                titulo_cargado.setText(cadena_inthashcal+" - "+titulo_guardado);
                
                
            break;
            }
            
            
                
}
        
    */
        
    }
    
    
    }
    
/**
 * Lee el contenido de un archivo y lo devuelve como una cadena de texto.
 *
 * Esta función toma la ruta de un archivo como parámetro, lee su contenido línea por línea,
 * y construye una cadena de texto con todo el contenido del archivo, incluyendo saltos de línea.
 * En caso de que ocurra una excepción de E/S, se registra el error utilizando el logger.
 *
 * @param ruta La ruta del archivo a leer.
 * @return El contenido del archivo como una cadena de texto.
 */   
public String obtenerContenidoArchivo(String ruta) {
    StringBuilder contenido = new StringBuilder();
    try (BufferedReader b = new BufferedReader(new FileReader(ruta))) {
        String linea;
        while ((linea = b.readLine()) != null) {
            contenido.append(linea).append("\n");  // Agregar cada línea al contenido
        }
    } catch (IOException ex) {
        Logger.getLogger(Interfaz2.class.getName()).log(Level.SEVERE, null, ex);
    }
    return contenido.toString();  // Devolver el contenido del archivo
}
        
/**
 * Muestra el título de un archivo resumen en un componente de la interfaz de usuario.
 *
 * Esta función obtiene el título de un objeto de tipo `resumen` y lo muestra
 * en un componente de la interfaz de usuario denominado `titulo_cargado`.
 *
 * @param resumen Un objeto de la clase `resumen` del cual se obtendrá el título.
 */
public void mostrar_tituloarchivo(resumen resumen) {
    
    
    String titulo_guardado = resumen.getTitulo();
    titulo_cargado.setText(titulo_guardado);
    
   
}

/**
 * Obtiene la primera palabra del título de un objeto de tipo `resumen`.
 *
 * Esta función toma un objeto de la clase `resumen`, obtiene su título, 
 * y devuelve la primera palabra del mismo.
 *
 * @param resumenObj Un objeto de la clase `resumen` del cual se obtendrá el título.
 * @return La primera palabra del título del objeto `resumen`.
 */
   public static String primera_palabra(resumen resumenObj){
       
       String [] t = resumenObj.getTitulo().split(" ");
       return t[0];
       
      
   }

/**
 * Obtiene el título de un contenido de texto.
 *
 * Esta función toma un string que representa el contenido completo de un archivo,
 * encuentra el índice de la palabra "Autores" y retorna el texto desde el inicio
 * hasta dicho índice, asumiendo que esta sección representa el título.
 *
 * @param sData El contenido del archivo como un string.
 * @return El título extraído del contenido del archivo.
 */
    public static String ObtenerTitulo(String sData)
    {
        String sTextoaAutores = "Autores";
        int intIndex = sData.indexOf(sTextoaAutores);
        return (sData.substring(0, intIndex));
    }
    
/**
 * Obtiene los autores de un contenido de texto.
 *
 * Esta función toma un string que representa el contenido completo de un archivo,
 * encuentra los índices de las palabras "Autores" y "Resumen", y retorna el texto
 * entre estos dos índices, asumiendo que esta sección representa los autores.
 *
 * @param sData El contenido del archivo como un string.
 * @return Los autores extraídos del contenido del archivo.
 */    
    public static String ObtenerAutores(String sData)
    {
        String sTextoAutores = "Autores";
        String sTextoResumen = "Resumen";
        int intIndexAutores = sData.indexOf(sTextoAutores)+sTextoAutores.length()+1;
        int intIndexResumen = sData.indexOf(sTextoResumen);
        return (sData.substring(intIndexAutores, intIndexResumen));
    }
 /**
 * Obtiene el resumen de un contenido de texto.
 *
 * Esta función toma un string que representa el contenido completo de un archivo,
 * encuentra los índices de las palabras "Resumen" y "Palabras Claves", y retorna el texto
 * entre estos dos índices, asumiendo que esta sección representa el resumen.
 *
 * @param sData El contenido del archivo como un string.
 * @return El resumen extraído del contenido del archivo.
 */   
    public static String ObtenerResumen(String sData)
    {
        String sTextoResumen = "Resumen";
        String sTextoPalabras = "Palabras Claves";
        int intIndexResumen = sData.indexOf(sTextoResumen)+sTextoResumen.length()+1;
        int intIndexPalabras = sData.indexOf(sTextoPalabras);
        return (sData.substring(intIndexResumen, intIndexPalabras));
    }
  /**
 * Obtiene las palabras clave de un contenido de texto.
 *
 * Esta función toma un string que representa el contenido completo de un archivo,
 * encuentra el índice de la palabra "Palabras Claves" y retorna el texto desde dicho
 * índice hasta el final del contenido, asumiendo que esta sección representa las palabras clave.
 *
 * @param sData El contenido del archivo como un string.
 * @return Las palabras clave extraídas del contenido del archivo.
 */  
    public static String ObtenerPalabrasClaves(String sData)
    {
        String sTextoPalabras = "Palabras Claves";
        int intIndexPalabras = sData.indexOf(sTextoPalabras)+sTextoPalabras.length()+2;
        return (sData.substring(intIndexPalabras, sData.length()));
    }
 /**
 * Inserta palabras clave en la tabla hash.
 *
 * Esta función toma una lista de palabras clave separadas por comas y un índice,
 * y las inserta en una tabla hash utilizando la función `insertPClave`.
 *
 * @param hPClaves La tabla hash representada como un array de NodoDoble.
 * @param ListaNPalabras Una cadena de texto que contiene las palabras clave separadas por comas.
 * @param index El índice asociado al resumen donde se encuentran las palabras clave.
 */
    public static void IncluirPalabrasClaves (NodoDoble hPClaves[], String ListaNPalabras, int index)
    {
        String[] ListaPalabras = ListaNPalabras.split(",");
        
        for (String Palabra : ListaPalabras)
        {
            tablaHash.insertPClave(hPClaves, Palabra, index);
        }
    
    }                                              

    private void analizar_resumenActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        int indiceRSeleccionado = -1;
        int totalResumen = modelo.getSize();
        for (int indice=0; indice<totalResumen; indice++)
        {
            if (resuemen_cargado.isSelectedIndex(indice))
            {
                indiceRSeleccionado = indice;
                break;
            }
        }
        if (indiceRSeleccionado>-1)
        {
            String sTResumen = resuemen_cargado.getSelectedValue();
            int indiceResumen = Integer.parseInt(sTResumen.substring(0, sTResumen.indexOf(" ")));
            resumenObj = ListaResumenes[indiceResumen];
            estadisticas();
        }
        else
            JOptionPane.showMessageDialog(null, "Seleccione el resumen a analizar.");
    }
/**
 * Cuenta el número de veces que aparece una palabra clave en un texto dado.
 *
 * @param sData El texto en el que se buscará la palabra clave.
 * @param sPalabraClave La palabra clave que se desea contar en el texto.
 * @return El número de veces que la palabra clave aparece en el texto.
 */
    public static int CuentaPalabraClave(String sData, String sPalabraClave)
    {
        boolean bContinuar = true;
        int nNroPalabras = 0;
        int currentPos = sData.indexOf(sPalabraClave);
        String sCurrentData = sData;
        if (currentPos != -1)
        {
            while(bContinuar)
            {
                if (currentPos != -1)
                {
                    nNroPalabras++;
                    bContinuar = true;
                    sCurrentData = sCurrentData.substring(currentPos+sPalabraClave.length(), sCurrentData.length());
                    currentPos = sCurrentData.indexOf(sPalabraClave);
                }
                else
                    bContinuar = false;
            }
        }
        return nNroPalabras;
    }
    
    /**
 * Genera estadísticas de palabras clave en el resumen y las muestra en un componente de texto.
 * Cuenta cuántas veces aparece cada palabra clave en el resumen y muestra los resultados en formato de texto.
 */
    public void estadisticas(){
    String ListaPalabras[];
        
        
        ListaPalabras = resumenObj.getP_clave().split(",");
         String texto_acumulado = "";
        for (String pclave :ListaPalabras){
        int NroVecesPalabraClave;
        NroVecesPalabraClave = CuentaPalabraClave(resumenObj.getInfo(), pclave);
        
        
        texto_acumulado += "Numero de veces "+ pclave + " en el Resumen: '" + String.valueOf(NroVecesPalabraClave) + "'\n";
        
        
        
        }
        info_estadisticas.setText(resumenObj.getAutores()+texto_acumulado+"\n");
    }                                                

    private void agregar_listaActionPerformed(java.awt.event.ActionEvent evt) {                                              
      resuemen_cargado.setModel(modelo);
      modelo.addElement(titulo_cargado.getText());
      titulo_cargado.setText("");
        
    }                                             

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {                                      
   
        String nombreArchivo = "Historial.txt";
        String rutaArchivo = System.getProperty("user.home") + File.separator + "Documents" + File.separator;

        // Crea un objeto File para el archivo de texto
        File archivo = new File(rutaArchivo + nombreArchivo);

    try {
        // Crea un objeto FileWriter para escribir en el archivo
        FileWriter escritor = new FileWriter(archivo);

        int count=0;
        int numero= ListaResumenes.length;

        while(count<numero)
        {
            if(ListaResumenes[count]!=null)
            {
                escritor.write(ListaResumenes[count].getTitulo());
                escritor.write("");
                escritor.write(ListaResumenes[count].getAutores());
                escritor.write("");
                escritor.write(ListaResumenes[count].getP_clave());
                escritor.write("");
                escritor.write(ListaResumenes[count].getInfo());
                escritor.write("\n");
                escritor.write("\n");
            }
            count++;
        }
       
        escritor.close();

        // Muestra una notificación al usuario
        JOptionPane.showMessageDialog(null, "Datos guardados con éxito en " + rutaArchivo + nombreArchivo);

        // Cierra la aplicación
        this.dispose();
    } catch (IOException e) {
        // Si se produce un error al crear el archivo, muestra una notificación al usuario
        JOptionPane.showMessageDialog(null, "Error al crear el archivo de texto");
        e.printStackTrace();
    }
 
        
    }                                     

    private void search_pclaveActionPerformed(java.awt.event.ActionEvent evt) {                                              
        String PCBuscar;
        PCBuscar = input_buscar.getText();
        boolean bContinuar=true;
        
        
        modelo2.clear();
        info_resumen.setText("");
        
        int indiceEstimado = tablaHash.calcularHash(PCBuscar);
        if (hPClaves[indiceEstimado].getData().equals(PCBuscar))
        {
            //Encontro la Palabra Clave
            //JOptionPane.showMessageDialog(null, "Encontro la palabra clave");
            ListaDoble listaIndice = hPClaves[indiceEstimado].getListaAdy();
            NodoDoble nodo = listaIndice.getpFirst();
            while(bContinuar)
            {
                Lista_para_buscar.setModel(modelo2);
                modelo2.addElement(nodo.getData() + " - " + ListaResumenes[Integer.parseInt(nodo.getData())].getTitulo());
                nodo = nodo.getpNext();
                if (nodo == null)
                    bContinuar = false;
            }
        }
        else
        {
            //Sigue buscando en los siguientes nodos.
            while (!hPClaves[indiceEstimado].getData().equals(PCBuscar) && !hPClaves[indiceEstimado].getData().equals("")) {
                indiceEstimado = (indiceEstimado + 1) % 50;
            }
            if (hPClaves[indiceEstimado].getData().equals(PCBuscar))
            {
                //Encontro la Palabra Clave
                //JOptionPane.showMessageDialog(null, "Encontro la palabra clave");
                ListaDoble listaIndice = hPClaves[indiceEstimado].getListaAdy();
                NodoDoble nodo = listaIndice.getpFirst();
                while(bContinuar)
                {
                    Lista_para_buscar.setModel(modelo2);
                    modelo2.addElement(ListaResumenes[Integer.parseInt(nodo.getData())].getTitulo());
                    nodo = nodo.getpNext();
                    if (nodo == null)
                        bContinuar = false;
                }
            }
            else
            {
                //No existe
                JOptionPane.showMessageDialog(null, "Palabra clave no encontrada.");
            }
            
        }
    }                                             

    private void search_autorActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int contador = 0;
        String comparador = "";
        int num = ListaResumenes.length;
        String autores = input_buscar.getText().trim();
        boolean bAlgunResultado = false;

        modelo2.clear();
        info_resumen.setText("");

        while (contador< num){
            if(ListaResumenes[contador]== null){
//                System.out.println("");
            }else{
                comparador = ListaResumenes[contador].getAutores().trim();
                comparador = limpiarCadena(comparador);
//                System.out.println(comparador);
                    if(comparador.contains(autores)){
                        Lista_para_buscar.setModel(modelo2);
                        modelo2.addElement(Integer.toString(contador) + " - " + ListaResumenes[contador].getTitulo());
                        input_buscar.setText("");                         
                        bAlgunResultado = true;
                    }else{
//                   System.out.println(".");
                }
            }contador ++;
            
            }
        if (!bAlgunResultado)
            JOptionPane.showMessageDialog(null, "Autor no encontrado.");
    }
    /**
 * Limpia una cadena de texto eliminando saltos de línea y espacios adicionales.
 * Reemplaza todos los saltos de línea con un espacio y elimina espacios en blanco adicionales.
 *
 * @param cadena La cadena de texto que se desea limpiar.
 * @return La cadena de texto limpiada, sin saltos de línea y con espacios adicionales eliminados.
 */
    public static String limpiarCadena(String cadena) {
    // Reemplaza saltos de línea con un espacio y elimina espacios adicionales
    return cadena.replaceAll("[\\r\\n]+", " ").replaceAll("\\s+", " ").trim();


    }                                            

    private void mostrar_inforesumenActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        int indiceRSeleccionado = -1;
        int totalResumen = modelo2.getSize();
        for (int indice=0; indice<totalResumen; indice++)
        {
            if (Lista_para_buscar.isSelectedIndex(indice))
            {
                indiceRSeleccionado = indice;
                break;
            }
        }
        if (indiceRSeleccionado>-1)
        {
            String sTResumen = Lista_para_buscar.getSelectedValue();
            int indiceResumen = Integer.parseInt(sTResumen.substring(0, sTResumen.indexOf(" ")));
            resumenObj = ListaResumenes[indiceResumen];
            info_resumen.setText("Titulo: "+resumenObj.getTitulo()+"\n"+"Autores: "+resumenObj.getAutores()+"\n"+"Informacion: "+resumenObj.getInfo()+"\n"+"Palabras claves: "+resumenObj.getP_clave());
        }
        else
            JOptionPane.showMessageDialog(null, "Seleccione un resultado de su búsqueda.");
        
        
        
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JList<String> Lista_para_buscar;
    private javax.swing.JButton agregar_lista;
    private javax.swing.JToggleButton analizar_resumen;
    private javax.swing.JToggleButton cargar_resumen;
    private javax.swing.JTextArea info_estadisticas;
    private javax.swing.JTextArea info_resumen;
    private javax.swing.JTextField input_buscar;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton mostrar_inforesumen;
    private javax.swing.JList<String> resuemen_cargado;
    private javax.swing.JButton salir;
    private javax.swing.JToggleButton search_autor;
    private javax.swing.JToggleButton search_pclave;
    private javax.swing.JTextArea titulo_cargado;
    // End of variables declaration                   

}
